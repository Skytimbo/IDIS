# /api/app/services.py
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
from context_store import ContextStore
from . import schemas

# NOTE: This is a simplified service layer. These functions will need
# to be backed by corresponding methods in the ContextStore class.

def get_all_entities_for_user(db: ContextStore, user_id: str):
    # Assumes a method like `get_entities_by_user(user_id)` exists in ContextStore
    return db.get_user_entities(user_id)

def create_new_entity(db: ContextStore, entity: schemas.EntityCreate, user_id: str):
    # Assumes a method like `create_entity(name, user_id)` exists in ContextStore
    return db.create_new_entity(entity_name=entity.entity_name, user_id=user_id)

def get_cases_for_entity(db: ContextStore, entity_id: int, user_id: str):
    # Assumes a method like `get_cases_by_entity_id(entity_id, user_id)` exists
    return db.get_cases_for_entity(entity_id=entity_id, user_id=user_id)

def create_new_case(db: ContextStore, case: schemas.CaseCreate, user_id: str):
    # Assumes a method like `create_case(...)` exists in ContextStore
    return db.create_new_case(
        entity_id=case.entity_id,
        user_id=user_id
        # case_name will be generated by the existing logic in create_new_case
    )